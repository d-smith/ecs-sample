AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Create a service based on the pfactors container, which is relatively easy
  to call in a manner that will trigger CPU based autoscaling reules.
Parameters:
  LambdaArn:
    Description: Lambda function arn to send cloud watch log output to Sumo Logic
    Type: String
  VpcId:
    Type: String
  ECSCluster:
    Type: String
  ALBListenerArn:
    Type: String

Resources:

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  LogSubscriptionFilter: 
    Type: "AWS::Logs::SubscriptionFilter"
    Properties: 
      LogGroupName: 
        Ref: "CloudwatchLogsGroup"
      FilterPattern: ""
      DestinationArn: !Ref LambdaArn

  pfactorsTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: PrimeFactorsTask
      ContainerDefinitions:
        -
          Name: pf
          Image: xtracdev/pfactors
          PortMappings:
            -
              ContainerPort: 5000
              HostPort: 0
          Memory: 200
          Cpu: 500
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs-demo-app

  pfactorsTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /pf/1
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  pfactorsService:
    Type: AWS::ECS::Service
    DependsOn: PFListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: '2'
      LoadBalancers:
      - ContainerName: pf
        ContainerPort: '5000'
        TargetGroupArn: !Ref 'pfactorsTG'
      Role: !Ref ServiceRole
      TaskDefinition: !Ref 'pfactorsTaskDef'

  PFListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'pfactorsTG'
      Conditions:
      - Field: path-pattern
        Values: [/pf/*]
      ListenerArn: !Ref ALBListenerArn
      Priority: 2

  scalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: pfactorsService
    Properties:
      MaxCapacity: 12
      MinCapacity: 2
      ResourceId: 
        !Join ['', [service/,  !Ref ECSCluster, /, !GetAtt [pfactorsService, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*' 

  HighECSCPU:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 75.0
      AlarmActions:
      - !Ref ScaleOutECSService
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt [pfactorsService, Name]
      - Name: ClusterName
        Value: !Ref ECSCluster

  ScaleOutECSService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutService
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: scalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 500
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 100

  LowECSCPU:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 25.0
      AlarmActions:
      - !Ref ScaleInECSService
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt [pfactorsService, Name]
      - Name: ClusterName
        Value: !Ref ECSCluster


  ScaleInECSService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleInService
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: scalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 500
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -50

  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies: 
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument: 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }