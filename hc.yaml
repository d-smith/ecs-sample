AWSTemplateFormatVersion: '2010-09-09'
Description: >
    CF stack to instantiate the health check container accessible via the load balancer
Parameters:

  NetworkStack:
    Type: String

  ECSClusterStack:
    Type: String

  ALBStack:
    Type: String

Resources:

  Service: 
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties: 
      Cluster:
        Fn::ImportValue: !Sub "${ECSClusterStack}-EcsCluster"
      Role: !Ref ServiceRole
      DesiredCount: 2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers: 
      - ContainerName: "hcping"
        ContainerPort: 4000
        TargetGroupArn: !Ref TargetGroup

#  hcpingService:
#    Type: AWS::ECS::Service
#    DependsOn: ListenerRule
#    Properties:
#      Cluster:
#        Fn::ImportValue: !Sub "${ECSClusterStack}-EcsCluster"
#      DesiredCount: '2'
#      LoadBalancers:
#      - ContainerName: hcping
#        ContainerPort: '4000'
#        TargetGroupArn: !Ref 'hcpingTG'
#      Role:!Ref ServiceRole
#      TaskDefinition: !Ref 'hcPingTaskDef'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HCPingTask
      ContainerDefinitions:
        - 
          Name: hcping
          Essential: true
          Image: xtracdev/hcping
          Memory: 128
          PortMappings:
            -
              ContainerPort: 4000
              HostPort: 0

#  hcPingTaskDef:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: HttpPingTask
#      ContainerDefinitions:
#        -
#          Name: hcping
#          Image: xtracdev/hcping
#          PortMappings:
#            -
#              ContainerPort: 4000
#              HostPort: 0
#          Memory: 150

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}-VPCID"
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /hcping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

 # hcpingTG:
 #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
 #   DependsOn: ECSALB
 #   Properties:
 #     HealthCheckIntervalSeconds: 10
 #     HealthCheckPath: /hcping
 #     HealthCheckProtocol: HTTP
 #     HealthCheckTimeoutSeconds: 5
 #     HealthyThresholdCount: 2
 #     Name: service1TG
 #     Port: 80
 #     Protocol: HTTP
 #     UnhealthyThresholdCount: 2
 #     VpcId:
 #       Fn::ImportValue: !Sub "${NetworkStack}-VPCID"

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${ALBStack}-ALBListenerArn"
      Priority: 1
      Conditions:
      - Field: path-pattern
        Values: [/hcping]
      Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward

#  ECSALBListenerRule1:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    DependsOn: ALBListener
#    Properties:
#      Actions:
#      - Type: forward
#        TargetGroupArn: !Ref 'hcpingTG'
#      Conditions:
#      - Field: path-pattern
#        Values: [/hcping]
#      ListenerArn: !Ref 'ALBListener'
#      Priority: 1

    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies: 
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument: 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }